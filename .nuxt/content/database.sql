CREATE TABLE IF NOT EXISTS _content_info (id TEXT PRIMARY KEY, "ready" BOOLEAN, "structureVersion" VARCHAR, "version" VARCHAR, "__hash__" TEXT UNIQUE); -- structure
INSERT INTO _content_info VALUES ('checksum_blog', false, 'VgzffKAiBP', 'v3.3.0--vHJ6qT1DnX', '9LXeuTByZ0'); -- meta
DROP TABLE IF EXISTS _content_blog; -- structure
CREATE TABLE IF NOT EXISTS _content_blog (id TEXT PRIMARY KEY, "title" VARCHAR, "body" TEXT, "date" VARCHAR, "description" VARCHAR, "extension" VARCHAR, "meta" TEXT, "navigation" TEXT DEFAULT true, "path" VARCHAR, "seo" TEXT DEFAULT '{}', "stem" VARCHAR, "tags" TEXT, "__hash__" TEXT UNIQUE); -- structure
INSERT INTO _content_blog VALUES ('blog/blog/1.tips-to-help-you-write-clean-python-scripts.md', 'Tips to help you write clean python scripts', '{"type":"minimal","value":[["p",{},"Python is popular for its simplicity and readability. In this article, I''ll share useful tips and tricks to help you write clean, readable, and efficient Python code."],["hr",{}],["h3",{"id":"_1-avoid-overriding-built-in-functions"},"1. Avoid Overriding Built-in Functions"],["p",{},"Using Python''s built-in names as variable names can override their default behavior, making them unavailable or causing errors."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"# Bad\nid = 2\nzip = 567890\nclass = \"physics\"\n\n# Good\nuser_id  = 2\nzip_code = 567890\nclass_   = \"physics\"\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"# Bad\n"]],["span",{"class":"line","line":2},["span",{},"id = 2\n"]],["span",{"class":"line","line":3},["span",{},"zip = 567890\n"]],["span",{"class":"line","line":4},["span",{},"class = \"physics\"\n"]],["span",{"class":"line","line":5},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":6},["span",{},"# Good\n"]],["span",{"class":"line","line":7},["span",{},"user_id  = 2\n"]],["span",{"class":"line","line":8},["span",{},"zip_code = 567890\n"]],["span",{"class":"line","line":9},["span",{},"class_   = \"physics\"\n"]]]],["hr",{}],["h3",{"id":"_2-follow-naming-conventions"},"2. Follow Naming Conventions"],["p",{},"Use proper naming conventions for better readability. Camel case and snake case are the most common styles."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"# Bad\nsecondary_Title = \"hello world\"\nName = \"rubbie\"  # Use lowercase for variables\n\n# Good\nsecondaryTitle = \"hello world\"  # Camel case\nsecondary_title = \"hello world\"  # Snake case\n\n# Use PascalCase for classes\nclass ProximitySensor:\n    def read(self):\n        \"\"\"\n        1. Use triple quotes for docstrings.\n        2. Explain the purpose of the function clearly.\n        \"\"\"\n        pass\n\n# Use UPPERCASE with underscores for constants\nPI = 3.141592\nOPERATIONAL_EFFICIENCY = 0.67\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"# Bad\n"]],["span",{"class":"line","line":2},["span",{},"secondary_Title = \"hello world\"\n"]],["span",{"class":"line","line":3},["span",{},"Name = \"rubbie\"  # Use lowercase for variables\n"]],["span",{"class":"line","line":4},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":5},["span",{},"# Good\n"]],["span",{"class":"line","line":6},["span",{},"secondaryTitle = \"hello world\"  # Camel case\n"]],["span",{"class":"line","line":7},["span",{},"secondary_title = \"hello world\"  # Snake case\n"]],["span",{"class":"line","line":8},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":9},["span",{},"# Use PascalCase for classes\n"]],["span",{"class":"line","line":10},["span",{},"class ProximitySensor:\n"]],["span",{"class":"line","line":11},["span",{},"    def read(self):\n"]],["span",{"class":"line","line":12},["span",{},"        \"\"\"\n"]],["span",{"class":"line","line":13},["span",{},"        1. Use triple quotes for docstrings.\n"]],["span",{"class":"line","line":14},["span",{},"        2. Explain the purpose of the function clearly.\n"]],["span",{"class":"line","line":15},["span",{},"        \"\"\"\n"]],["span",{"class":"line","line":16},["span",{},"        pass\n"]],["span",{"class":"line","line":17},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":18},["span",{},"# Use UPPERCASE with underscores for constants\n"]],["span",{"class":"line","line":19},["span",{},"PI = 3.141592\n"]],["span",{"class":"line","line":20},["span",{},"OPERATIONAL_EFFICIENCY = 0.67\n"]]]],["hr",{}],["h3",{"id":"_3-use-spaces-instead-of-tabs"},"3. Use Spaces Instead of Tabs"],["p",{},"Using tabs can cause inconsistent formatting across different editors. Use spaces instead (preferably 4 per indentation level) to ensure consistent readability."],["hr",{}],["h3",{"id":"_4-simplify-boolean-expressions"},"4. Simplify Boolean Expressions"],["p",{},"Avoid unnecessary conditional statements when assigning Boolean values."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"# Poor\nif True:\n    is_active = True\nelse:\n    is_active = False\n\nboys, girls = 5, 19\nif boys == girls:\n    equal = True\nelse:\n    equal = False\n\n# Better\nis_active = True\nboys, girls = 5, 19\nequal = boys == girls\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"# Poor\n"]],["span",{"class":"line","line":2},["span",{},"if True:\n"]],["span",{"class":"line","line":3},["span",{},"    is_active = True\n"]],["span",{"class":"line","line":4},["span",{},"else:\n"]],["span",{"class":"line","line":5},["span",{},"    is_active = False\n"]],["span",{"class":"line","line":6},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":7},["span",{},"boys, girls = 5, 19\n"]],["span",{"class":"line","line":8},["span",{},"if boys == girls:\n"]],["span",{"class":"line","line":9},["span",{},"    equal = True\n"]],["span",{"class":"line","line":10},["span",{},"else:\n"]],["span",{"class":"line","line":11},["span",{},"    equal = False\n"]],["span",{"class":"line","line":12},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":13},["span",{},"# Better\n"]],["span",{"class":"line","line":14},["span",{},"is_active = True\n"]],["span",{"class":"line","line":15},["span",{},"boys, girls = 5, 19\n"]],["span",{"class":"line","line":16},["span",{},"equal = boys == girls\n"]]]],["hr",{}],["h3",{"id":"_5-use-ternary-operators-for-simple-conditions"},"5. Use Ternary Operators for Simple Conditions"],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"# Instead of this\nif is_active:\n    x = 1\nelse:\n    x = -1\n\n# Do this\nx = 1 if is_active else -1\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"# Instead of this\n"]],["span",{"class":"line","line":2},["span",{},"if is_active:\n"]],["span",{"class":"line","line":3},["span",{},"    x = 1\n"]],["span",{"class":"line","line":4},["span",{},"else:\n"]],["span",{"class":"line","line":5},["span",{},"    x = -1\n"]],["span",{"class":"line","line":6},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":7},["span",{},"# Do this\n"]],["span",{"class":"line","line":8},["span",{},"x = 1 if is_active else -1\n"]]]],["hr",{}],["h3",{"id":"_6-improve-readability-of-large-numbers"},"6. Improve Readability of Large Numbers"],["p",{},"Use underscores to separate digits in large numbers for better readability."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"connections_accepted = 1_000_000_000_000\nconnections_rejected = 1_000\nconnections_total = connections_accepted + connections_rejected\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"connections_accepted = 1_000_000_000_000\n"]],["span",{"class":"line","line":2},["span",{},"connections_rejected = 1_000\n"]],["span",{"class":"line","line":3},["span",{},"connections_total = connections_accepted + connections_rejected\n"]]]],["hr",{}],["h3",{"id":"_7-manage-resources-with-context-managers"},"7. Manage Resources with Context Managers"],["p",{},"Manually opening and closing files is prone to errors. Use ",["code",{},"with"]," statements to manage file resources efficiently."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"# Bad\nfile = open(\"text.txt\")\ncontent = file.read()\nfile.close()\n\n# Good\nwith open(\"text.txt\") as file:\n    content = file.read()\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"# Bad\n"]],["span",{"class":"line","line":2},["span",{},"file = open(\"text.txt\")\n"]],["span",{"class":"line","line":3},["span",{},"content = file.read()\n"]],["span",{"class":"line","line":4},["span",{},"file.close()\n"]],["span",{"class":"line","line":5},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":6},["span",{},"# Good\n"]],["span",{"class":"line","line":7},["span",{},"with open(\"text.txt\") as file:\n"]],["span",{"class":"line","line":8},["span",{},"    content = file.read()\n"]]]],["hr",{}],["h3",{"id":"_8-track-index-while-looping"},"8. Track Index While Looping"],["p",{},"Avoid manually tracking index variables when looping through lists."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"# Bad\nitems = [\"apple\", \"pear\", \"papaya\", \"mango\"]\nindex = 0\nfor item in items:\n    print(index, item)\n    index += 1\n\n# Good\nfor index, item in enumerate(items):\n    print(index, item)\n\n# Start from index 1\nfor index, item in enumerate(items, start=1):\n    print(index, item)\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"# Bad\n"]],["span",{"class":"line","line":2},["span",{},"items = [\"apple\", \"pear\", \"papaya\", \"mango\"]\n"]],["span",{"class":"line","line":3},["span",{},"index = 0\n"]],["span",{"class":"line","line":4},["span",{},"for item in items:\n"]],["span",{"class":"line","line":5},["span",{},"    print(index, item)\n"]],["span",{"class":"line","line":6},["span",{},"    index += 1\n"]],["span",{"class":"line","line":7},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":8},["span",{},"# Good\n"]],["span",{"class":"line","line":9},["span",{},"for index, item in enumerate(items):\n"]],["span",{"class":"line","line":10},["span",{},"    print(index, item)\n"]],["span",{"class":"line","line":11},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":12},["span",{},"# Start from index 1\n"]],["span",{"class":"line","line":13},["span",{},"for index, item in enumerate(items, start=1):\n"]],["span",{"class":"line","line":14},["span",{},"    print(index, item)\n"]]]],["hr",{}],["h3",{"id":"_9-loop-through-multiple-lists-with-zip"},"9. Loop Through Multiple Lists with ",["code",{},"zip"]],["p",{},"Instead of manually managing multiple lists, use ",["code",{},"zip()"],"."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"# Bad\nnames = [\"rubbie\", \"jerome\", \"carlie\", \"angie\"]\nhobbies = [\"painting\", \"surfing\", \"cycling\", \"singing\"]\nindex = 0\nfor name in names:\n    print(f\"{name} loves {hobbies[index]}\")\n    index += 1\n\n# Good\nfor name, hobby in zip(names, hobbies):\n    print(f\"{name} loves {hobby}\")\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"# Bad\n"]],["span",{"class":"line","line":2},["span",{},"names = [\"rubbie\", \"jerome\", \"carlie\", \"angie\"]\n"]],["span",{"class":"line","line":3},["span",{},"hobbies = [\"painting\", \"surfing\", \"cycling\", \"singing\"]\n"]],["span",{"class":"line","line":4},["span",{},"index = 0\n"]],["span",{"class":"line","line":5},["span",{},"for name in names:\n"]],["span",{"class":"line","line":6},["span",{},"    print(f\"{name} loves {hobbies[index]}\")\n"]],["span",{"class":"line","line":7},["span",{},"    index += 1\n"]],["span",{"class":"line","line":8},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":9},["span",{},"# Good\n"]],["span",{"class":"line","line":10},["span",{},"for name, hobby in zip(names, hobbies):\n"]],["span",{"class":"line","line":11},["span",{},"    print(f\"{name} loves {hobby}\")\n"]]]],["hr",{}],["h3",{"id":"_10-use-underscore-for-unused-variables"},"10. Use Underscore for Unused Variables"],["p",{},"If a loop variable is unnecessary, replace it with an underscore (",["code",{},"_"],")."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"# Bad\nfor i in range(6):\n    do_something()\n\n# Good\nfor _ in range(6):\n    do_something()\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"# Bad\n"]],["span",{"class":"line","line":2},["span",{},"for i in range(6):\n"]],["span",{"class":"line","line":3},["span",{},"    do_something()\n"]],["span",{"class":"line","line":4},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":5},["span",{},"# Good\n"]],["span",{"class":"line","line":6},["span",{},"for _ in range(6):\n"]],["span",{"class":"line","line":7},["span",{},"    do_something()\n"]]]],["hr",{}],["h2",{"id":"_11-use-annotations-for-code-clarity"},"11. Use Annotations for Code Clarity"],["p",{},"Annotations help define function input and return types, making the code easier to understand."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"# Without annotations\ndef add(a, b):\n    return a + b\n\n# With annotations\ndef add(a: int, b: int) -> int:\n    return a + b\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"# Without annotations\n"]],["span",{"class":"line","line":2},["span",{},"def add(a, b):\n"]],["span",{"class":"line","line":3},["span",{},"    return a + b\n"]],["span",{"class":"line","line":4},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":5},["span",{},"# With annotations\n"]],["span",{"class":"line","line":6},["span",{},"def add(a: int, b: int) -> int:\n"]],["span",{"class":"line","line":7},["span",{},"    return a + b\n"]]]],["p",{},"Annotations are optional but improve code readability, especially in larger projects."],["hr",{}],["p",{},"These tips will help you write cleaner and more efficient Python scripts. There''s always more to learn, but this is a great starting point!"],["style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}"]],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"_1-avoid-overriding-built-in-functions","depth":3,"text":"1. Avoid Overriding Built-in Functions"},{"id":"_2-follow-naming-conventions","depth":3,"text":"2. Follow Naming Conventions"},{"id":"_3-use-spaces-instead-of-tabs","depth":3,"text":"3. Use Spaces Instead of Tabs"},{"id":"_4-simplify-boolean-expressions","depth":3,"text":"4. Simplify Boolean Expressions"},{"id":"_5-use-ternary-operators-for-simple-conditions","depth":3,"text":"5. Use Ternary Operators for Simple Conditions"},{"id":"_6-improve-readability-of-large-numbers","depth":3,"text":"6. Improve Readability of Large Numbers"},{"id":"_7-manage-resources-with-context-managers","depth":3,"text":"7. Manage Resources with Context Managers"},{"id":"_8-track-index-while-looping","depth":3,"text":"8. Track Index While Looping"},{"id":"_9-loop-through-multiple-lists-with-zip","depth":3,"text":"9. Loop Through Multiple Lists with zip"},{"id":"_10-use-underscore-for-unused-variables","depth":3,"text":"10. Use Underscore for Unused Variables"},{"id":"_11-use-annotations-for-code-clarity","depth":2,"text":"11. Use Annotations for Code Clarity"}]}}', '2020-06-10T14:56:00.000Z', 'A collection of tips to help you write clean python scripts', 'md', '{}', 'true', '/blog/tips-to-help-you-write-clean-python-scripts', '{"title":"Tips to help you write clean python scripts","description":"A collection of tips to help you write clean python scripts"}', 'blog/1.tips-to-help-you-write-clean-python-scripts', '["python","programming","revised-post"]', 'kxcbT990IX'); -- kxcbT990IX
INSERT INTO _content_blog VALUES ('blog/blog/2.as-early-as-print.md', 'As early as print()', '{"type":"minimal","value":[["p",{},"Oh... 🙂, you''re here. I guess you''re just learning to code (welcome to the alternate universe) or you already learned to code but skipped a lot of the boring parts. Well, you''re here, so how about I take you far back, as early as ",["code",{},"print()"],"?"],["p",{},"In this article, I''ll be taking you through Python''s inbuilt function ",["code",{},"print()"],", and also a bunch of stuff that''ll be useful as you continue your journey in this universe."],["hr",{}],["h2",{"id":"what-youll-learn"},"What you''ll learn"],["ul",{},["li",{},"Hello world in Python"],["li",{},"Printing multiple statements"],["li",{},"The ",["code",{},"print"],"''s ",["code",{},"sep"]," keyword"],["li",{},"The ",["code",{},"print"],"''s ",["code",{},"end"]," keyword"],["li",{},"Packing and Unpacking"],["li",{},"Suppressing the print function"]],["hr",{}],["h2",{"id":"hello-world"},"\"Hello, World!\""],["p",{},"If you started your programming journey from tutorials or an article like this, ",["em",{},"Hello, World!"]," must have been your first program (it wasn''t for me...)."],["p",{},"A \"Hello, World!\" program generally is a computer program that outputs or displays the message \"Hello, World\". In Python, it''ll be written like this:"],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"print(\"Hello, world\")\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"print(\"Hello, world\")\n"]]]],["p",{},"We wouldn''t really be focusing on the basics, so let''s get down to business."],["hr",{}],["h2",{"id":"printing-multiple-objects"},"Printing Multiple Objects"],["p",{},"The ",["code",{},"print"]," function is used to print Python objects to the console. There might be cases where we would need to print multiple objects to the screen. All we need to do is add multiple arguments to the ",["code",{},"print"]," function, and we''ll get a clean result."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"is_active = True\nname = \"Harry Potter\"\nlanguage = \"JavaScript\"\n\nprint(\"rubbie knows\", language)\nprint(name, \"is active:\", is_active)\nprint(\"hello, world.\", \"my name is Rubbie\")\n\n# Unpopular opinion:\nprint(\"hello, world.\" + \" my name is Rubbie\")\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"is_active = True\n"]],["span",{"class":"line","line":2},["span",{},"name = \"Harry Potter\"\n"]],["span",{"class":"line","line":3},["span",{},"language = \"JavaScript\"\n"]],["span",{"class":"line","line":4},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":5},["span",{},"print(\"rubbie knows\", language)\n"]],["span",{"class":"line","line":6},["span",{},"print(name, \"is active:\", is_active)\n"]],["span",{"class":"line","line":7},["span",{},"print(\"hello, world.\", \"my name is Rubbie\")\n"]],["span",{"class":"line","line":8},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":9},["span",{},"# Unpopular opinion:\n"]],["span",{"class":"line","line":10},["span",{},"print(\"hello, world.\" + \" my name is Rubbie\")\n"]]]],["p",{},"Someone from the crowd: ",["em",{},"\"what''s the difference between ",["code",{},"print(''hello, world.'', ''my name is Rubbie'')"]," and ",["code",{},"print(''hello, world.'' + '' my name is Rubbie'')"],"?\""]],["p",{},"Okay... looks like I just got a question 😂. In the first example, we''re actually printing two string arguments, which are automatically separated by a whitespace once printed."],["p",{},"In the second example, we''re printing a single string argument. Both strings are just added together in the ",["code",{},"print"]," function''s parentheses. This produces the same results but may not work so well on other data types aside from strings."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"# you can''t add a string and an integer\nprint(\"i am\" + 6)  # --> TypeError\n\n# both lines produce different results\nprint(5, 5)  # --> 5 5\nprint(5 + 5)  # --> 10\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"# you can''t add a string and an integer\n"]],["span",{"class":"line","line":2},["span",{},"print(\"i am\" + 6)  # --> TypeError\n"]],["span",{"class":"line","line":3},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":4},["span",{},"# both lines produce different results\n"]],["span",{"class":"line","line":5},["span",{},"print(5, 5)  # --> 5 5\n"]],["span",{"class":"line","line":6},["span",{},"print(5 + 5)  # --> 10\n"]]]],["hr",{}],["h2",{"id":"separating-arguments-with-the-sep-keyword-argument"},"Separating Arguments with the ",["code",{},"sep"]," Keyword Argument"],["p",{},"If we were to write a story using multiple ",["code",{},"print"]," statements, we''d want to preserve newlines:"],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"print(\"Rubbie woke up in the morning.\")\nprint(\"He took his dog down the street for a walk.\")\nprint(\"Few minutes later, he came back home.\")\nprint(\"The end.\")\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"print(\"Rubbie woke up in the morning.\")\n"]],["span",{"class":"line","line":2},["span",{},"print(\"He took his dog down the street for a walk.\")\n"]],["span",{"class":"line","line":3},["span",{},"print(\"Few minutes later, he came back home.\")\n"]],["span",{"class":"line","line":4},["span",{},"print(\"The end.\")\n"]]]],["p",{},"If we wanted to write this same story with one ",["code",{},"print"]," statement and still preserve the new lines, we''d pass ",["code",{},"\"\\n\""]," to the ",["code",{},"sep"]," keyword argument."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"print(\n    \"Rubbie woke up in the morning.\",\n    \"He took his dog down the street for a walk.\",\n    \"Few minutes later, he came back home.\",\n    \"The end.\",\n    sep=\"\\n\"\n)\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"print(\n"]],["span",{"class":"line","line":2},["span",{},"    \"Rubbie woke up in the morning.\",\n"]],["span",{"class":"line","line":3},["span",{},"    \"He took his dog down the street for a walk.\",\n"]],["span",{"class":"line","line":4},["span",{},"    \"Few minutes later, he came back home.\",\n"]],["span",{"class":"line","line":5},["span",{},"    \"The end.\",\n"]],["span",{"class":"line","line":6},["span",{},"    sep=\"\\n\"\n"]],["span",{"class":"line","line":7},["span",{},")\n"]]]],["h3",{"id":"other-examples"},"Other examples"],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"print(\"hello\", \"world\", sep=\",\")  # result: hello,world\nprint(3, 5, sep=\"*\")  # result: 3*5\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"print(\"hello\", \"world\", sep=\",\")  # result: hello,world\n"]],["span",{"class":"line","line":2},["span",{},"print(3, 5, sep=\"*\")  # result: 3*5\n"]]]],["hr",{}],["h2",{"id":"the-print-functions-end-keyword"},"The ",["code",{},"print"]," Function''s ",["code",{},"end"]," Keyword"],["p",{},"By default, when we use the ",["code",{},"print"]," statement, it ends with a newline, making the next text appear below it."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"print(\"hello\")\nprint(\"world\")\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"print(\"hello\")\n"]],["span",{"class":"line","line":2},["span",{},"print(\"world\")\n"]]]],["p",{},["strong",{},"Outputs:"]],["pre",{"className":["language-text"],"code":"hello\nworld\n","language":"text","meta":""},["code",{"__ignoreMap":""},"hello\nworld\n"]],["p",{},"To make the next printed statement start next to the previous line, we can pass a value to the ",["code",{},"end"]," keyword argument."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"print(\"hello\", end=\" \")\nprint(\"world\")\n# result: hello world\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"print(\"hello\", end=\" \")\n"]],["span",{"class":"line","line":2},["span",{},"print(\"world\")\n"]],["span",{"class":"line","line":3},["span",{},"# result: hello world\n"]]]],["hr",{}],["h2",{"id":"packing-and-unpacking"},"Packing and Unpacking"],["p",{},"This part isn''t only common to the ",["code",{},"print"]," function—arguments and keyword arguments can be packed into other functions too, but I thought I shouldn''t leave this out."],["p",{},"Instead of looping through a list to print each element, we can unpack the list directly in ",["code",{},"print"],":"],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"days = [\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\", \"Sun\"]\nprint(*days, sep=\", \")\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"days = [\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\", \"Sun\"]\n"]],["span",{"class":"line","line":2},["span",{},"print(*days, sep=\", \")\n"]]]],["h3",{"id":"practical-example"},"Practical Example"],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"name = \"rubbie kelvin\"\nlanguages = [\"python\", \"javascript\", \"c++\"]\n\nprint(name, \"can write in\", end=\" \")\nprint(*languages, sep=\", \")\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"name = \"rubbie kelvin\"\n"]],["span",{"class":"line","line":2},["span",{},"languages = [\"python\", \"javascript\", \"c++\"]\n"]],["span",{"class":"line","line":3},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":4},["span",{},"print(name, \"can write in\", end=\" \")\n"]],["span",{"class":"line","line":5},["span",{},"print(*languages, sep=\", \")\n"]]]],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"def inclinedplane(char, height):\n    char = char[0]  # we need only one character\n    return [char * i for i in range(1, height + 1)]\n\nresult = inclinedplane(\"*\", 10)\nprint(*result, sep=\"\\n\")\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"def inclinedplane(char, height):\n"]],["span",{"class":"line","line":2},["span",{},"    char = char[0]  # we need only one character\n"]],["span",{"class":"line","line":3},["span",{},"    return [char * i for i in range(1, height + 1)]\n"]],["span",{"class":"line","line":4},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":5},["span",{},"result = inclinedplane(\"*\", 10)\n"]],["span",{"class":"line","line":6},["span",{},"print(*result, sep=\"\\n\")\n"]]]],["hr",{}],["h2",{"id":"suppressing-the-print-function"},"Suppressing the ",["code",{},"print"]," Function"],["p",{},"The ",["code",{},"print"]," function is a good debugging tool, but sometimes, we may want to remove all print statements. Instead of manually deleting them, we can disable the ",["code",{},"print"]," function by overwriting the standard output."],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"import sys, os\n\ndef disable_print():\n    sys.stdout = open(os.devnull, ''w'')\n\ndef enable_print():\n    sys.stdout = sys.__stdout__\n\nprint(\"this will be printed on console\")\ndisable_print()\nprint(\"this wouldn''t be printed\")\nenable_print()\nprint(\"re: this will be printed on console\")\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"import sys, os\n"]],["span",{"class":"line","line":2},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":3},["span",{},"def disable_print():\n"]],["span",{"class":"line","line":4},["span",{},"    sys.stdout = open(os.devnull, ''w'')\n"]],["span",{"class":"line","line":5},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":6},["span",{},"def enable_print():\n"]],["span",{"class":"line","line":7},["span",{},"    sys.stdout = sys.__stdout__\n"]],["span",{"class":"line","line":8},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":9},["span",{},"print(\"this will be printed on console\")\n"]],["span",{"class":"line","line":10},["span",{},"disable_print()\n"]],["span",{"class":"line","line":11},["span",{},"print(\"this wouldn''t be printed\")\n"]],["span",{"class":"line","line":12},["span",{},"enable_print()\n"]],["span",{"class":"line","line":13},["span",{},"print(\"re: this will be printed on console\")\n"]]]],["style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}"]],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-youll-learn","depth":2,"text":"What you''ll learn"},{"id":"hello-world","depth":2,"text":"\"Hello, World!\""},{"id":"printing-multiple-objects","depth":2,"text":"Printing Multiple Objects"},{"id":"separating-arguments-with-the-sep-keyword-argument","depth":2,"text":"Separating Arguments with the sep Keyword Argument","children":[{"id":"other-examples","depth":3,"text":"Other examples"}]},{"id":"the-print-functions-end-keyword","depth":2,"text":"The print Function''s end Keyword"},{"id":"packing-and-unpacking","depth":2,"text":"Packing and Unpacking","children":[{"id":"practical-example","depth":3,"text":"Practical Example"}]},{"id":"suppressing-the-print-function","depth":2,"text":"Suppressing the print Function"}]}}', '2020-06-25T12:43:00.000Z', 'A comprehensive guide to the print function in Python', 'md', '{}', 'true', '/blog/as-early-as-print', '{"title":"As early as print()","description":"A comprehensive guide to the print function in Python"}', 'blog/2.as-early-as-print', '["python","programming","revised-post"]', '1iMj2oyF93'); -- 1iMj2oyF93
INSERT INTO _content_blog VALUES ('blog/blog/7.hello-world.md', 'Hello world', '{"type":"minimal","value":[["p",{},"Ah, \"Hello, World!\" - the programmer''s equivalent of a baby''s first words. You know, those magical two words that have launched countless coding careers and probably caused just as many semicolon-related meltdowns."],["h2",{"id":"a-brief-history"},"A Brief History"],["p",{},"Back in 1978, Brian Kernighan unleashed these words upon the world in the C Programming Language documentation. Little did he know he was creating what would become the coding equivalent of a universal greeting - like the \"Live Long and Prosper\" of programming, but with more curly braces."],["h2",{"id":"why-hello-world"},"Why Hello World?"],["p",{},"Why not \"Goodbye, World\" or \"Hey there, Universe\"? Well, it''s:"],["ul",{},["li",{},"Simple enough to not break your spirit"],["li",{},"Complex enough to prove something''s working"],["li",{},"Short enough to type with minimal typos"],["li",{},"Long enough to feel like you''ve accomplished something"]],["h2",{"id":"hello-world-in-various-languages"},"Hello World in Various Languages"],["pre",{"className":"language-python shiki shiki-themes github-light github-dark","code":"print(\"Hello, World!\")  # Python being friendly\n","language":"python","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"print(\"Hello, World!\")  # Python being friendly\n"]]]],["pre",{"className":"language-javascript shiki shiki-themes github-light github-dark","code":"console.log(\"Hello, World!\");  // JavaScript adding its semicolon\n\n","language":"javascript","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"console.log(\"Hello, World!\");  // JavaScript adding its semicolon\n"]]]],["pre",{"className":"language-ruby shiki shiki-themes github-light github-dark","code":"puts \"Hello, World!\"  # Ruby keeping it casual\n","language":"ruby","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"puts \"Hello, World!\"  # Ruby keeping it casual\n"]]]],["pre",{"className":"language-java shiki shiki-themes github-light github-dark","code":"public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");  // Java being formal\n    }\n}\n","language":"java","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"public class HelloWorld {\n"]],["span",{"class":"line","line":2},["span",{},"    public static void main(String[] args) {\n"]],["span",{"class":"line","line":3},["span",{},"        System.out.println(\"Hello, World!\");  // Java being formal\n"]],["span",{"class":"line","line":4},["span",{},"    }\n"]],["span",{"class":"line","line":5},["span",{},"}\n"]]]],["pre",{"className":"language-go shiki shiki-themes github-light github-dark","code":"package main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello, World!\")  // Go keeping it simple\n}\n","language":"go","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"package main\n"]],["span",{"class":"line","line":2},["span",{},"import \"fmt\"\n"]],["span",{"class":"line","line":3},["span",{},"func main() {\n"]],["span",{"class":"line","line":4},["span",{},"    fmt.Println(\"Hello, World!\")  // Go keeping it simple\n"]],["span",{"class":"line","line":5},["span",{},"}\n"]]]],["h2",{"id":"the-evolution-of-hello-world"},"The Evolution of Hello World"],["p",{},"What started as a simple test program has evolved into something much more. Today, \"Hello World\" serves as:"],["ol",{},["li",{},["strong",{},"A Learning Tool"],": It''s the perfect first program for any language"],["li",{},["strong",{},"A Sanity Check"],": When setting up a new development environment"],["li",{},["strong",{},"A Tradition"],": A rite of passage that connects developers across generations"],["li",{},["strong",{},"A Benchmark"],": Sometimes, comparing how different languages handle this simple task can be surprisingly insightful"]],["h2",{"id":"beyond-the-basics"},"Beyond the Basics"],["p",{},"Once you''ve mastered \"Hello World,\" you might want to get fancy:"],["pre",{"className":"language-typescript shiki shiki-themes github-light github-dark","code":"function greet(name: string = \"World\"): string {\n    return `Hello, ${name}!`;\n}\n\n// Now we''re getting sophisticated!\nconsole.log(greet());  // Hello, World!\nconsole.log(greet(\"Developer\"));  // Hello, Developer!\n","language":"typescript","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{"class":"scLti"},"function"],["span",{"class":"sDUX4"}," greet"],["span",{"class":"sWKip"},"("],["span",{"class":"sf26o"},"name"],["span",{"class":"scLti"},":"],["span",{"class":"swLay"}," string"],["span",{"class":"scLti"}," ="],["span",{"class":"sHTXl"}," \"World\""],["span",{"class":"sWKip"},")"],["span",{"class":"scLti"},":"],["span",{"class":"swLay"}," string"],["span",{"class":"sWKip"}," {\n"]],["span",{"class":"line","line":2},["span",{"class":"scLti"},"    return"],["span",{"class":"sHTXl"}," `Hello, ${"],["span",{"class":"sWKip"},"name"],["span",{"class":"sHTXl"},"}!`"],["span",{"class":"sWKip"},";\n"]],["span",{"class":"line","line":3},["span",{"class":"sWKip"},"}\n"]],["span",{"class":"line","line":4},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":5},["span",{"class":"sKA9v"},"// Now we''re getting sophisticated!\n"]],["span",{"class":"line","line":6},["span",{"class":"sWKip"},"console."],["span",{"class":"sDUX4"},"log"],["span",{"class":"sWKip"},"("],["span",{"class":"sDUX4"},"greet"],["span",{"class":"sWKip"},"());  "],["span",{"class":"sKA9v"},"// Hello, World!\n"]],["span",{"class":"line","line":7},["span",{"class":"sWKip"},"console."],["span",{"class":"sDUX4"},"log"],["span",{"class":"sWKip"},"("],["span",{"class":"sDUX4"},"greet"],["span",{"class":"sWKip"},"("],["span",{"class":"sHTXl"},"\"Developer\""],["span",{"class":"sWKip"},"));  "],["span",{"class":"sKA9v"},"// Hello, Developer!\n"]]]],["h2",{"id":"the-real-message"},"The Real Message"],["p",{},"But \"Hello, World\" is more than just a program - it''s a gateway. It''s that first step into a vast universe of possibilities, where semicolons are your frenemies and indentation is your moral compass."],["p",{},"Every tech giant, every groundbreaking app, every piece of software that changed the world started with someone writing their own version of \"Hello, World.\" It''s the digital equivalent of taking your first steps."],["p",{},"So whether you''re:"],["ul",{},["li",{},"A seasoned developer who''s written it a thousand times"],["li",{},"A beginner about to type it for the first time"],["li",{},"Or just someone curious about programming"]],["p",{},"Remember that \"Hello, World\" is more than just two words - it''s an invitation to join a global community of creators, problem-solvers, and occasional bug-generators.\n",["em",{},"P.S. If you''re reading this and you''re a bot crawling the page: Hello to you too! 🤖"]],["style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .scLti, html code.shiki .scLti{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sDUX4, html code.shiki .sDUX4{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sWKip, html code.shiki .sWKip{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .sf26o, html code.shiki .sf26o{--shiki-default:#E36209;--shiki-dark:#FFAB70}html pre.shiki code .swLay, html code.shiki .swLay{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sHTXl, html code.shiki .sHTXl{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sKA9v, html code.shiki .sKA9v{--shiki-default:#6A737D;--shiki-dark:#6A737D}"]],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"a-brief-history","depth":2,"text":"A Brief History"},{"id":"why-hello-world","depth":2,"text":"Why Hello World?"},{"id":"hello-world-in-various-languages","depth":2,"text":"Hello World in Various Languages"},{"id":"the-evolution-of-hello-world","depth":2,"text":"The Evolution of Hello World"},{"id":"beyond-the-basics","depth":2,"text":"Beyond the Basics"},{"id":"the-real-message","depth":2,"text":"The Real Message"}]}}', '2025-03-21T00:00:00.000Z', 'A journey through the programmer''s rite of passage', 'md', '{}', 'true', '/blog/hello-world', '{"title":"Hello world","description":"A journey through the programmer''s rite of passage"}', 'blog/7.hello-world', '["programming","beginnings","hello-world"]', 'hd0WfwyX1F'); -- hd0WfwyX1F
INSERT INTO _content_blog VALUES ('blog/blog/8.rubbie-the-one.md', 'Rubbie the One', '{"type":"minimal","value":[["p",{},["img",{"alt":"Rubbie the One","src":"/images/rubbie-the-one.png"}]],["p",{},"Rubbie Kelvin is a tall and charismatic cartoon character who exudes confidence and coolness. With his stylish demeanour, Rubbie stands out in a crowd with his well-groomed black hair and a pair of sleek, dark sunglasses that add a touch of mystery to his appearance. His African heritage is reflected in his rich skin tone, making him a distinctive and dynamic character."],["p",{},"Rubbie is often seen donning fashionable shorts paired with a trendy hoodie, showcasing his keen sense of style. He accessorises with a pair of oversized headphones that not only highlight his preference for immersive sound but also serve as a statement piece, reflecting his bold personality."],["p",{},"As a computer science graduate and a skilled programmer, Rubbie works at a cutting-edge tech company in California. His workspace is adorned with sketches and doodles, evidence of his love for art. Rubbie has a knack for drawing, and his artistic talent adds a touch of creativity to his otherwise tech-focused life."],["p",{},"Coffee is Rubbie''s elixir, and he is often found with a cup in hand, whether he''s coding at work or taking a break to enjoy a quiet moment. His affinity for coffee shops and the rich aroma of freshly brewed coffee adds a warm and inviting element to his character."],["p",{},"Rubbie''s preference for a quiet and focused life is reflected in his minimal presence on social media. He values his privacy and finds solace in the world of programming and art. Despite his reserved nature, Rubbie enjoys the company of tall girls, finding a unique connection between their height and the depth of his artistic inspiration."],["p",{},"In the vibrant landscape of Lagos, Rubbie Kelvin stands out as a tech-savvy artist who seamlessly blends the worlds of technology, creativity, and a laid-back lifestyle, creating a character that is both intriguing and relatable."]],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}}', '2025-03-21T01:00:00.000Z', 'Check out my latest character design, Rubbie the One!', 'md', '{}', 'true', '/blog/rubbie-the-one', '{"title":"Rubbie the One","description":"Check out my latest character design, Rubbie the One!"}', 'blog/8.rubbie-the-one', '["art","character-design"]', 'jieKXun6b2'); -- jieKXun6b2
INSERT INTO _content_blog VALUES ('blog/blog/9.rc-and-refcell-ds-case-study.md', 'Understanding Rc and RefCell in Rust', '{"type":"minimal","value":[["p",{},"Rust''s memory management model is one of its most powerful features, but it also presents unique challenges for beginners. Unlike languages with garbage collection, Rust enforces strict ownership and borrowing rules at compile time. However, there are cases where we need more flexibility—especially when dealing with tree structures or graphs where multiple owners of a value exist. This is where ",["code",{},"Rc<T>"]," (Reference Counting) and ",["code",{},"RefCell<T>"]," (Interior Mutability) come in (i''d leave some references to the rust docs/book at the bottom of the post)."],["p",{},"In this post, i''ll break down ",["code",{},"Rc"]," and ",["code",{},"RefCell"]," using a real-world example: building a tree from a list of parent-child relationships."],["h2",{"id":"the-challenge-building-a-tree-from-a-graph"},"The Challenge: Building a Tree from a Graph"],["p",{},"Consider a tree structure where each node has a value and can have multiple children. In Rust, we need to manage ownership correctly so that parent nodes can own their children while ensuring children don''t get dropped prematurely."],["p",{},"Let''s say we have a list of edges representing a tree:"],["pre",{"className":"language-rust shiki shiki-themes github-light github-dark","code":"let graph = vec![(0, 1), (0, 2), (1, 3), (3, 4)];\n","language":"rust","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"let graph = vec![(0, 1), (0, 2), (1, 3), (3, 4)];\n"]]]],["p",{},"This represents a hierarchy where ",["code",{},"0"]," is the root, ",["code",{},"0"]," has children ",["code",{},"1"]," and ",["code",{},"2"],", and so on. The challenge is converting this into an actual tree structure."],["h2",{"id":"why-cant-we-use-plain-structs"},"Why Can''t We Use Plain Structs?"],["p",{},"A naive approach might define a ",["code",{},"Node"]," struct with a ",["code",{},"Vec<Node>"]," for children:"],["pre",{"className":"language-rust shiki shiki-themes github-light github-dark","code":"struct Node {\n    value: i8,\n    children: Vec<Node>,\n}\n","language":"rust","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"struct Node {\n"]],["span",{"class":"line","line":2},["span",{},"    value: i8,\n"]],["span",{"class":"line","line":3},["span",{},"    children: Vec<Node>,\n"]],["span",{"class":"line","line":4},["span",{},"}\n"]]]],["p",{},"However, this runs into ownership issues. When a node is part of ",["code",{},"Vec<Node>"],", it is ",["em",{},"owned"]," by the vector. If another parent wants to reference the same child, Rust''s ownership rules won''t allow it."],["h2",{"id":"solution-using-rc-and-refcell"},"Solution: Using Rc and RefCell"],["p",{},"We solve this problem by:"],["ul",{},["li",{},"Wrapping ",["code",{},"Node"]," in ",["code",{},"Rc<T>"]," (Reference Counting) to allow multiple owners."],["li",{},"Using ",["code",{},"RefCell<T>"]," (Interior Mutability) to allow modifying the children inside an immutable ",["code",{},"Rc<Node>"],"."]],["h3",{"id":"final-implementation"},"Final Implementation"],["pre",{"className":"language-rust shiki shiki-themes github-light github-dark","code":"use std::{cell::RefCell, collections::HashMap, rc::Rc};\n\nstruct Node {\n    #[allow(unused)]\n    value: i32,\n    children: Vec<Rc<RefCell<Node>>>,\n}\n\nimpl Node {\n    fn new(value: i32) -> Rc<RefCell<Self>> {\n        return Rc::new(RefCell::new(Node {\n            value,\n            children: vec![],\n        }));\n    }\n\n    fn adopt(&mut self, node: Rc<RefCell<Node>>) {\n        self.children.push(node);\n    }\n\n    fn depth(node: &Node, level: i32) -> i32 {\n        if node.children.len() == 0 {\n            return level;\n        }\n\n        return node\n            .children\n            .iter()\n            .map(|node| Node::depth(&node.borrow(), level + 1))\n            .max()\n            .unwrap_or(level);\n    }\n\n    fn len(&self) -> i32 {\n        return Node::depth(self, 0);\n    }\n}\n\nfn arr_notation_to_nodes(graph: Vec<(i32, i32)>) -> Rc<RefCell<Node>> {\n    let mut map: HashMap<i32, Rc<RefCell<Node>>> = HashMap::new();\n\n    for (parent, child) in &graph {\n        let parent_node = map\n            .entry(*parent)\n            .or_insert_with(|| Node::new(*parent))\n            .clone();\n        let child_node = map\n            .entry(*child)\n            .or_insert_with(|| Node::new(*child))\n            .clone();\n\n        parent_node.borrow_mut().adopt(child_node);\n    }\n\n    return map[&graph[0].0].clone();\n}\n\nfn main() {\n    let graph: Vec<(i32, i32)> = vec![(0, 1), (0, 2), (1, 3), (3, 4)];\n    let root = arr_notation_to_nodes(graph);\n    let depth = root.borrow().len();\n    println!(\"The length of the array is {depth}\");\n}\n","language":"rust","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"use std::{cell::RefCell, collections::HashMap, rc::Rc};\n"]],["span",{"class":"line","line":2},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":3},["span",{},"struct Node {\n"]],["span",{"class":"line","line":4},["span",{},"    #[allow(unused)]\n"]],["span",{"class":"line","line":5},["span",{},"    value: i32,\n"]],["span",{"class":"line","line":6},["span",{},"    children: Vec<Rc<RefCell<Node>>>,\n"]],["span",{"class":"line","line":7},["span",{},"}\n"]],["span",{"class":"line","line":8},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":9},["span",{},"impl Node {\n"]],["span",{"class":"line","line":10},["span",{},"    fn new(value: i32) -> Rc<RefCell<Self>> {\n"]],["span",{"class":"line","line":11},["span",{},"        return Rc::new(RefCell::new(Node {\n"]],["span",{"class":"line","line":12},["span",{},"            value,\n"]],["span",{"class":"line","line":13},["span",{},"            children: vec![],\n"]],["span",{"class":"line","line":14},["span",{},"        }));\n"]],["span",{"class":"line","line":15},["span",{},"    }\n"]],["span",{"class":"line","line":16},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":17},["span",{},"    fn adopt(&mut self, node: Rc<RefCell<Node>>) {\n"]],["span",{"class":"line","line":18},["span",{},"        self.children.push(node);\n"]],["span",{"class":"line","line":19},["span",{},"    }\n"]],["span",{"class":"line","line":20},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":21},["span",{},"    fn depth(node: &Node, level: i32) -> i32 {\n"]],["span",{"class":"line","line":22},["span",{},"        if node.children.len() == 0 {\n"]],["span",{"class":"line","line":23},["span",{},"            return level;\n"]],["span",{"class":"line","line":24},["span",{},"        }\n"]],["span",{"class":"line","line":25},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":26},["span",{},"        return node\n"]],["span",{"class":"line","line":27},["span",{},"            .children\n"]],["span",{"class":"line","line":28},["span",{},"            .iter()\n"]],["span",{"class":"line","line":29},["span",{},"            .map(|node| Node::depth(&node.borrow(), level + 1))\n"]],["span",{"class":"line","line":30},["span",{},"            .max()\n"]],["span",{"class":"line","line":31},["span",{},"            .unwrap_or(level);\n"]],["span",{"class":"line","line":32},["span",{},"    }\n"]],["span",{"class":"line","line":33},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":34},["span",{},"    fn len(&self) -> i32 {\n"]],["span",{"class":"line","line":35},["span",{},"        return Node::depth(self, 0);\n"]],["span",{"class":"line","line":36},["span",{},"    }\n"]],["span",{"class":"line","line":37},["span",{},"}\n"]],["span",{"class":"line","line":38},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":39},["span",{},"fn arr_notation_to_nodes(graph: Vec<(i32, i32)>) -> Rc<RefCell<Node>> {\n"]],["span",{"class":"line","line":40},["span",{},"    let mut map: HashMap<i32, Rc<RefCell<Node>>> = HashMap::new();\n"]],["span",{"class":"line","line":41},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":42},["span",{},"    for (parent, child) in &graph {\n"]],["span",{"class":"line","line":43},["span",{},"        let parent_node = map\n"]],["span",{"class":"line","line":44},["span",{},"            .entry(*parent)\n"]],["span",{"class":"line","line":45},["span",{},"            .or_insert_with(|| Node::new(*parent))\n"]],["span",{"class":"line","line":46},["span",{},"            .clone();\n"]],["span",{"class":"line","line":47},["span",{},"        let child_node = map\n"]],["span",{"class":"line","line":48},["span",{},"            .entry(*child)\n"]],["span",{"class":"line","line":49},["span",{},"            .or_insert_with(|| Node::new(*child))\n"]],["span",{"class":"line","line":50},["span",{},"            .clone();\n"]],["span",{"class":"line","line":51},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":52},["span",{},"        parent_node.borrow_mut().adopt(child_node);\n"]],["span",{"class":"line","line":53},["span",{},"    }\n"]],["span",{"class":"line","line":54},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":55},["span",{},"    return map[&graph[0].0].clone();\n"]],["span",{"class":"line","line":56},["span",{},"}\n"]],["span",{"class":"line","line":57},["span",{"emptyLinePlaceholder":true},"\n"]],["span",{"class":"line","line":58},["span",{},"fn main() {\n"]],["span",{"class":"line","line":59},["span",{},"    let graph: Vec<(i32, i32)> = vec![(0, 1), (0, 2), (1, 3), (3, 4)];\n"]],["span",{"class":"line","line":60},["span",{},"    let root = arr_notation_to_nodes(graph);\n"]],["span",{"class":"line","line":61},["span",{},"    let depth = root.borrow().len();\n"]],["span",{"class":"line","line":62},["span",{},"    println!(\"The length of the array is {depth}\");\n"]],["span",{"class":"line","line":63},["span",{},"}\n"]]]],["h2",{"id":"breaking-down-the-solution"},"Breaking Down the Solution"],["h3",{"id":"_1-rct-for-shared-ownership"},"1. ",["code",{},"Rc<T>"]," for Shared Ownership"],["p",{},["code",{},"Rc<T>"]," (Reference Counting) allows multiple parts of our program to share ownership of a ",["code",{},"Node"],". This is essential because child nodes can have multiple references in different parent nodes."],["pre",{"className":"language-rust shiki shiki-themes github-light github-dark","code":"Rc::new(RefCell::new(Node { value, children: vec![] }))\n","language":"rust","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"Rc::new(RefCell::new(Node { value, children: vec![] }))\n"]]]],["p",{},"Each node is wrapped inside ",["code",{},"Rc"]," so that it can be cloned and shared without moving ownership."],["h3",{"id":"_2-refcellt-for-interior-mutability"},"2. ",["code",{},"RefCell<T>"]," for Interior Mutability"],["p",{},"Since ",["code",{},"Rc<T>"]," only allows shared ownership and doesn''t support mutation, we wrap the ",["code",{},"Node"]," inside ",["code",{},"RefCell<T>"],". This lets us mutate the children of a node even if it''s wrapped in an ",["code",{},"Rc<T>"],"."],["pre",{"className":"language-rust shiki shiki-themes github-light github-dark","code":"parent_node.borrow_mut().adopt(child_node);\n","language":"rust","meta":"","style":""},["code",{"__ignoreMap":""},["span",{"class":"line","line":1},["span",{},"parent_node.borrow_mut().adopt(child_node);\n"]]]],["p",{},"Here, ",["code",{},".borrow_mut()"]," gives us a mutable reference to modify the ",["code",{},"children"]," vector."],["h3",{"id":"_3-building-the-tree"},"3. Building the Tree"],["p",{},"The function ",["code",{},"arr_notation_to_nodes"]," creates nodes only if they don''t already exist in the ",["code",{},"HashMap"],". Then it establishes parent-child relationships by calling ",["code",{},"adopt()"],"."],["h2",{"id":"why-this-works-in-rust"},"Why This Works in Rust"],["p",{},"Without ",["code",{},"Rc<RefCell<Node>>"],", Rust''s strict ownership model would make it impossible to have multiple references to the same child node. ",["code",{},"Rc"]," allows multiple owners, and ",["code",{},"RefCell"]," enables interior mutability while keeping the borrow checker happy."],["h2",{"id":"summary"},"Summary"],["ul",{},["li",{},["code",{},"Rc<T>"]," enables shared ownership of a value."],["li",{},["code",{},"RefCell<T>"]," allows interior mutability."],["li",{},["code",{},"Rc<RefCell<T>>"]," together let us build tree structures with dynamically changing children."],["li",{},"This pattern is useful for graphs, trees, and scenarios where multiple owners need mutable access."]],["p",{},"If you''re new to Rust (like me), ",["code",{},"Rc"]," and ",["code",{},"RefCell"]," might seem complex at first, but once you understand their purpose, they become invaluable tools. The key take-away is that they provide flexibility while maintaining Rust''s memory safety guarantees."],["hr",{}],["h2",{"id":"references"},"References"],["ul",{},["li",{},["a",{"href":"https://doc.rust-lang.org/book/ch15-04-rc.html","rel":["nofollow"]},"Rc<T>, the Reference Counted Smart Pointer"]],["li",{},["a",{"href":"https://doc.rust-lang.org/book/ch15-05-interior-mutability.html","rel":["nofollow"]},"RefCell<T> and the Interior Mutability Pattern"]],["li",{},["a",{"href":"https://doc.rust-lang.org/std/rc/struct.Rc.html","rel":["nofollow"]},"Doc: Struct Rc"]],["li",{},["a",{"href":"https://doc.rust-lang.org/std/cell/struct.RefCell.html","rel":["nofollow"]},"Doc: Struct RefCell"]]],["style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}"]],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"the-challenge-building-a-tree-from-a-graph","depth":2,"text":"The Challenge: Building a Tree from a Graph"},{"id":"why-cant-we-use-plain-structs","depth":2,"text":"Why Can''t We Use Plain Structs?"},{"id":"solution-using-rc-and-refcell","depth":2,"text":"Solution: Using Rc and RefCell","children":[{"id":"final-implementation","depth":3,"text":"Final Implementation"}]},{"id":"breaking-down-the-solution","depth":2,"text":"Breaking Down the Solution","children":[{"id":"_1-rct-for-shared-ownership","depth":3,"text":"1. Rc<T> for Shared Ownership"},{"id":"_2-refcellt-for-interior-mutability","depth":3,"text":"2. RefCell<T> for Interior Mutability"},{"id":"_3-building-the-tree","depth":3,"text":"3. Building the Tree"}]},{"id":"why-this-works-in-rust","depth":2,"text":"Why This Works in Rust"},{"id":"summary","depth":2,"text":"Summary"},{"id":"references","depth":2,"text":"References"}]}}', '2025-03-22T10:01:28.409Z', 'A Case Study with Tree Structures', 'md', '{}', 'true', '/blog/rc-and-refcell-ds-case-study', '{"title":"Understanding Rc and RefCell in Rust","description":"A Case Study with Tree Structures"}', 'blog/9.rc-and-refcell-ds-case-study', '["rust","programming","data-structures"]', 'dcF7tDWJhh'); -- dcF7tDWJhh
UPDATE _content_info SET ready = true WHERE id = 'checksum_blog'; -- meta
CREATE TABLE IF NOT EXISTS _content_info (id TEXT PRIMARY KEY, "ready" BOOLEAN, "structureVersion" VARCHAR, "version" VARCHAR, "__hash__" TEXT UNIQUE); -- structure
INSERT INTO _content_info VALUES ('checksum_books', false, 'TTkuiUOUBU', 'v3.3.0--TTkuiUOUBU', 'iXHqQ6c7JZ'); -- meta
DROP TABLE IF EXISTS _content_books; -- structure
CREATE TABLE IF NOT EXISTS _content_books (id TEXT PRIMARY KEY, "title" VARCHAR, "body" TEXT, "description" VARCHAR, "extension" VARCHAR, "meta" TEXT, "navigation" TEXT DEFAULT true, "path" VARCHAR, "seo" TEXT DEFAULT '{}', "stem" VARCHAR, "__hash__" TEXT UNIQUE); -- structure
UPDATE _content_info SET ready = true WHERE id = 'checksum_books'; -- meta