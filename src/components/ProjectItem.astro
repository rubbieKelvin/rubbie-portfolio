---
import { urlFor } from "@/lib/sanity";

type Props = {
  name: string;
  description: string;
  image: object | null;
  url: string;
  categories: {
    title: string;
  }[];
};

const { name, description, image, url, categories }: Props = Astro.props;

const imageUrl = () => {
  if (!image) return null;
  return urlFor(image).url();
};
---

<a
  href={url}
  target="_blank"
  rel="noopener noreferrer"
  class="flex gap-4 rounded-lg overflow-hidden group/project-item flex-col h-[160px]"
  style="border: 1px solid var(--color-border); transition: border-color 0.2s ease"
  onmouseover="this.style.borderColor='var(--color-accent)'"
  onmouseout="this.style.borderColor='var(--color-border)'"
>
  <div class="flex flex-col gap-2 p-4 flex-grow">
    <h2 class="text-lg" style="color: var(--color-text)">
      <span>{name}</span>
      <span
        class="animate-blink group-hover/project-item:inline hidden"
        style="color: var(--color-text-muted)"
      >
        â–‹
      </span>
    </h2>
    <p class="w-full line-clamp-2 text-sm flex-grow text-text-muted">{description}</p>
    <div class="flex gap-1 items-center">
      {
        categories.map((category, index) => (
          <>
            <span class="text-xs text-text-muted">{category.title}</span>
            {index < categories.length - 1 && <span class="text-text-muted">&middot;</span>}
          </>
        ))
      }
    </div>
  </div>


  <!-- {
    image && (
      <div class="flex-[30%] min-w-[200px] max-w-[200px] p-4">
        <img
          src={urlFor(image).width(200).height(200).url()}
          alt={name}
          class="w-full h-full object-fill rounded-lg"
        />
      </div>
    )
  } -->
</a>
